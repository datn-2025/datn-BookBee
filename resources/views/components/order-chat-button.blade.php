<!-- Order Chat Button Component -->
@if(Auth::check())
<button 
    type="button" 
    id="order-chat-btn-{{ $order->id }}" 
    data-order-id="{{ $order->id }}"
    class="order-chat-button hidden inline-flex items-center px-6 py-3 border-2 border-blue-500 text-blue-500 hover:bg-blue-500 hover:text-white font-bold text-sm uppercase tracking-wide transition-all duration-300"
    onclick="startOrderChat('{{ $order->id }}')">
    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4-8 9-8s9 3.582 9 8z" />
    </svg>
    LI√äN H·ªÜ V·ªÄ ƒê∆†N H√ÄNG
</button>
@endif

<script>
// Ki·ªÉm tra ƒëi·ªÅu ki·ªán chat cho ƒë∆°n h√†ng n√†y khi trang load
document.addEventListener('DOMContentLoaded', function() {
    checkOrderChatAvailability('{{ $order->id }}');
});

async function checkOrderChatAvailability(orderId) {
    try {
        const response = await fetch(`/api/orders/${orderId}/can-chat`, {
            method: 'GET',
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        });

        const data = await response.json();
        
        const chatButton = document.getElementById(`order-chat-btn-${orderId}`);
        if (chatButton) {
            if (data.can_chat) {
                chatButton.classList.remove('hidden');
            } else {
                chatButton.classList.add('hidden');
                // Optional: show reason in console for debugging
                if (data.reason) {
                    console.log(`Order ${orderId} chat not available: ${data.reason}`);
                }
            }
        }
    } catch (error) {
        console.error('Error checking order chat availability:', error);
    }
}

async function startOrderChat(orderId) {
    const button = document.getElementById(`order-chat-btn-${orderId}`);
    if (!button) {
        console.error('Chat button not found for order:', orderId);
        return;
    }
    
    const originalText = button.innerHTML;
    
    try {
        // Ki·ªÉm tra xem chat widget ƒë√£ c√≥ conversation ch∆∞a
        const currentConversationId = window.getCurrentConversationId ? window.getCurrentConversationId() : null;
        const currentMessages = window.getCurrentMessages ? window.getCurrentMessages() : [];
        
        console.log('üöÄ Starting order chat:', {
            orderId: orderId,
            currentConversationId: currentConversationId,
            currentMessagesCount: currentMessages.length
        });
        
        // Ki·ªÉm tra l·∫°i ƒëi·ªÅu ki·ªán chat tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
        const canChatResponse = await fetch(`/api/orders/${orderId}/can-chat`, {
            method: 'GET',
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        });

        const canChatData = await canChatResponse.json();
        
        if (!canChatData.can_chat) {
            // Hi·ªÉn th·ªã l√Ω do kh√¥ng th·ªÉ chat cho user
            alert(`Kh√¥ng th·ªÉ chat v·ªÅ ƒë∆°n h√†ng n√†y: ${canChatData.reason || 'L√Ω do kh√¥ng x√°c ƒë·ªãnh'}`);
            return;
        }
        
        // Show loading state
        button.disabled = true;
        button.innerHTML = `
            <svg class="animate-spin w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            ƒêANG KH·ªûI T·∫†O...
        `;

        const response = await fetch(`/api/orders/${orderId}/start-chat`, {
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        });

        const data = await response.json();
        
        if (data.success) {
            // L∆∞u th√¥ng tin order chat v√†o localStorage ho·∫∑c global variable
            window.currentOrderChat = {
                orderId: orderId,
                conversationId: data.conversation_id,
                orderInfo: data.order_info
            };
            
            console.log('‚úÖ Order chat response:', {
                success: data.success,
                conversationId: data.conversation_id,
                messagesCount: data.messages?.length || 0,
                sameConversation: currentConversationId === data.conversation_id
            });
            
            // M·ªü chat widget v·ªõi order context
            openOrderChatWidget(data);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            console.log('Order chat started successfully for order:', orderId);
        } else {
            alert(data.message || 'Kh√¥ng th·ªÉ kh·ªüi t·∫°o chat');
        }
    } catch (error) {
        console.error('Error starting order chat:', error);
        alert('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
    } finally {
        // Restore button state
        button.disabled = false;
        button.innerHTML = originalText;
    }
}

function openOrderChatWidget(chatData) {
    // M·ªü chat widget hi·ªán t·∫°i
    const chatToggle = document.getElementById('chat-toggle');
    const chatBox = document.getElementById('chat-box');
    
    if (chatToggle && chatBox) {
        chatBox.classList.remove('hidden');
        chatBox.style.display = 'block';
        
        // Ki·ªÉm tra conversation hi·ªán t·∫°i v·ªõi debug chi ti·∫øt
        const currentConversationId = window.getCurrentConversationId ? window.getCurrentConversationId() : null;
        const currentMessages = window.getCurrentMessages ? window.getCurrentMessages() : [];
        
        console.log('ÔøΩ [DETAILED DEBUG] Conversation comparison:', {
            currentConversationId: currentConversationId,
            currentConversationIdType: typeof currentConversationId,
            newConversationId: chatData.conversation_id,
            newConversationIdType: typeof chatData.conversation_id,
            areEqual: currentConversationId === chatData.conversation_id,
            areEqualLoose: currentConversationId == chatData.conversation_id,
            currentMessagesCount: currentMessages.length,
            allMessagesCount: chatData.messages?.length || 0,
            hasNewMessageOnly: !!chatData.new_message_only,
            newMessageContent: chatData.new_message_only?.content?.substring(0, 50) || 'none'
        });
        
        // Set order context TR∆Ø·ªöC
        if (window.setOrderContext) {
            window.setOrderContext(chatData.order_info);
        }
        
        // C·∫≠p nh·∫≠t header chat v·ªõi th√¥ng tin ƒë∆°n h√†ng
        updateChatHeader(chatData.order_info);
        
        // QUAN TR·ªåNG: X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ch∆∞a c√≥ conversation ID hi·ªán t·∫°i
        if (!currentConversationId) {
            console.log('üÜï [NO CURRENT CONVERSATION] First time opening chat or page refresh');
            console.log('üîÑ [STRATEGY] Load existing conversation from server if available');
            
            // Ch∆∞a c√≥ conversation hi·ªán t·∫°i - c·∫ßn load conversation t·ª´ server
            // Nh∆∞ng TR∆Ø·ªöC TI√äN load tin nh·∫Øn hi·ªán c√≥ (n·∫øu c√≥)
            if (window.loadOrderMessages) {
                // G·ªçi loadMessages t·ª´ API tr∆∞·ªõc ƒë·ªÉ kh√¥i ph·ª•c conversation
                loadExistingConversationFirst(chatData);
            } else {
                // Fallback - load full conversation
                console.log('‚ö†Ô∏è [FALLBACK] Loading full conversation');
                if (window.loadOrderMessages) {
                    window.loadOrderMessages(chatData.conversation_id, chatData.messages);
                } else {
                    loadMessagesDirectly();
                }
            }
        } else if (currentConversationId === chatData.conversation_id || 
                   currentConversationId.toString() === chatData.conversation_id.toString()) {
            console.log('‚úÖ [SAME CONVERSATION] Preserving existing messages - only adding new order info');
            console.log('üîç [CHECK] Has new_message_only:', !!chatData.new_message_only);
            console.log('üîç [CHECK] Current messages count:', currentMessages.length);
            
            // C√πng conversation - CH·ªà th√™m tin nh·∫Øn order m·ªõi (n·∫øu c√≥)
            if (chatData.new_message_only && window.loadOrderMessages) {
                console.log('‚ûï [ADD] New order message only:', chatData.new_message_only.content.substring(0, 50) + '...');
                // CH·ªà G·ª¨I MESSAGE M·ªöI - KH√îNG G·ª¨I T·∫§T C·∫¢
                window.loadOrderMessages(chatData.conversation_id, [chatData.new_message_only]);
            } else if (!chatData.new_message_only) {
                console.log('‚ÑπÔ∏è [SKIP] Order already discussed - no new message to add');
                // KH√îNG L√ÄM G√å - gi·ªØ nguy√™n conversation hi·ªán t·∫°i
            } else {
                console.log('‚ö†Ô∏è [WARNING] loadOrderMessages function not available');
            }
        } else {
            console.log('üîÑ [DIFFERENT CONVERSATION] Loading full conversation');
            // Kh√°c conversation ho·∫∑c ch∆∞a c√≥ conversation - load full
            if (window.loadOrderMessages) {
                // G·ª¨I T·∫§T C·∫¢ MESSAGES cho conversation m·ªõi
                window.loadOrderMessages(chatData.conversation_id, chatData.messages);
            } else {
                loadMessagesDirectly();
            }
        }
        
        console.log('Chat widget opened with order context:', {
            orderId: chatData.order_info?.id,
            orderCode: chatData.order_info?.order_code,
            conversationId: chatData.conversation_id
        });
    }
}

// Function ƒë·ªÉ load conversation hi·ªán c√≥ tr∆∞·ªõc khi x·ª≠ l√Ω order chat
async function loadExistingConversationFirst(chatData) {
    try {
        console.log('üîÑ [RECOVERY] Attempting to load existing conversation first');
        
        // G·ªçi API ƒë·ªÉ load conversation hi·ªán c√≥ c·ªßa user
        const response = await fetch('/api/messages?customer_id=' + document.getElementById('chat-user-info')?.dataset.userId, {
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                'Accept': 'application/json'
            }
        });
        
        const conversations = await response.json();
        
        if (conversations.length > 0) {
            const existingConv = conversations[0];
            console.log('‚úÖ [RECOVERY] Found existing conversation:', {
                existingConvId: existingConv.id,
                orderConvId: chatData.conversation_id,
                existingMessages: existingConv.messages?.length || 0,
                isSame: existingConv.id === chatData.conversation_id
            });
            
            if (existingConv.id === chatData.conversation_id) {
                console.log('üéØ [RECOVERY] Same conversation - merging with existing messages');
                
                // Load existing messages tr∆∞·ªõc
                if (window.loadOrderMessages) {
                    window.loadOrderMessages(existingConv.id, existingConv.messages || []);
                }
                
                // Sau ƒë√≥ th√™m order message n·∫øu c√≥
                if (chatData.new_message_only) {
                    setTimeout(() => {
                        console.log('‚ûï [RECOVERY] Adding order message after existing messages loaded');
                        window.loadOrderMessages(chatData.conversation_id, [chatData.new_message_only]);
                    }, 100);
                }
            } else {
                console.log('üîÑ [RECOVERY] Different conversation - load order conversation');
                if (window.loadOrderMessages) {
                    window.loadOrderMessages(chatData.conversation_id, chatData.messages);
                }
            }
        } else {
            console.log('üÜï [RECOVERY] No existing conversation - load order conversation as new');
            if (window.loadOrderMessages) {
                window.loadOrderMessages(chatData.conversation_id, chatData.messages);
            }
        }
    } catch (error) {
        console.error('‚ùå [RECOVERY] Error loading existing conversation:', error);
        // Fallback to normal order chat loading
        if (window.loadOrderMessages) {
            window.loadOrderMessages(chatData.conversation_id, chatData.messages);
        }
    }
}

// Function ƒë·ªÉ load messages tr·ª±c ti·∫øp t·ª´ API n·∫øu c·∫ßn
async function loadMessagesDirectly() {
    try {
        const response = await fetch('/api/messages?customer_id=' + document.getElementById('chat-user-info')?.dataset.userId, {
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                'Accept': 'application/json'
            }
        });
        
        const conversations = await response.json();
        if (conversations.length > 0) {
            const conv = conversations[0];
            if (window.renderMessages) {
                window.renderMessages(conv.messages || []);
            }
        }
    } catch (error) {
        console.error('Error loading messages directly:', error);
    }
}

// Function backup ƒë·ªÉ render messages n·∫øu c·∫ßn
function renderOrderMessages(messages) {
    const chatContent = document.getElementById('chat-content');
    if (!chatContent) return;
    
    chatContent.innerHTML = '';
    
    if (!messages.length) {
        chatContent.innerHTML = `
            <div class='flex justify-center mb-4'>
                <div class='bg-white rounded-lg shadow-sm px-4 py-3 max-w-[80%] border border-gray-100'>
                    <p class='text-sm text-gray-700 mb-1'>Cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!</p>
                    <p class='text-sm text-gray-600'>H√£y g·ª≠i tin nh·∫Øn ƒë·ªÉ b·∫Øt ƒë·∫ßu chat v·ªÅ ƒë∆°n h√†ng c·ªßa b·∫°n.</p>
                </div>
            </div>
        `;
        return;
    }
    
    messages.forEach(msg => {
        const isMe = msg.sender_id == document.getElementById('chat-user-info')?.dataset.userId;
        const align = isMe ? 'justify-end' : 'justify-start';
        const bg = isMe ? 'bg-green-100 text-right' : 'bg-white text-left';
        const name = msg.sender_name || 'Unknown';
        
        let messageContent = '';
        if (msg.type === 'system_order_info') {
            // X·ª≠ l√Ω tin nh·∫Øn th√¥ng tin ƒë∆°n h√†ng v·ªõi HTML formatting
            let formattedContent = (msg.content || '').replace(/\n/g, '<br>');
            formattedContent = formattedContent
                .replace(/<strong>(.*?)<\/strong>/g, '<span class="font-bold text-gray-800">$1</span>')
                .replace(/<span class="status-badge">(.*?)<\/span>/g, '<span class="inline-block bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded-full">$1</span>')
                .replace(/<span class="price-highlight">(.*?)<\/span>/g, '<span class="font-bold text-green-600">$1</span>')
                .replace(/‚Ä¢ /g, '<span class="text-blue-500">‚Ä¢</span> ');
            
            messageContent = `<div class="order-info-message">${formattedContent}</div>`;
        } else {
            messageContent = `<p class="text-sm text-gray-600">${(msg.content || '').replace(/\n/g, '<br>')}</p>`;
        }
        
        const html = `<div class="flex ${align} mb-2">
            <div class="${bg} rounded-lg shadow-sm px-4 py-2 max-w-[80%]">
                <div class="text-xs text-gray-400 mb-1">${name}</div>
                ${messageContent}
                <span class="text-xs text-gray-400">${msg.created_at ? new Date(msg.created_at).toLocaleTimeString('vi-VN', {hour: '2-digit', minute:'2-digit'}) : ''}</span>
            </div>
        </div>`;
        chatContent.insertAdjacentHTML('beforeend', html);
    });
    
    chatContent.scrollTop = chatContent.scrollHeight;
}

function updateChatHeader(orderInfo) {
    // T√¨m ph·∫ßn header c·ªßa chat widget
    const chatHeader = document.querySelector('#chat-box .bg-black');
    if (chatHeader && orderInfo) {
        // Th√™m th√¥ng tin ƒë∆°n h√†ng v√†o header
        const orderInfoEl = chatHeader.querySelector('.order-info') || document.createElement('div');
        orderInfoEl.className = 'order-info text-xs text-gray-300 mt-1';
        orderInfoEl.innerHTML = `üì¶ ƒê∆°n h√†ng #${orderInfo.order_code} - ${orderInfo.status}`;
        
        if (!chatHeader.querySelector('.order-info')) {
            chatHeader.appendChild(orderInfoEl);
        }
    }
}

// Helper function ƒë·ªÉ l·∫•y auth token (kh√¥ng c·∫ßn thi·∫øt n·ªØa v√¨ d√πng session)
// function getAuthToken() {
//     return document.querySelector('meta[name="csrf-token"]').getAttribute('content');
// }
</script>
