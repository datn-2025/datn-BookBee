/**
 * Real-time Notifications v·ªõi Laravel Echo v√† Pusher
 * X·ª≠ l√Ω th√¥ng b√°o cho admin v√† kh√°ch h√†ng
 */

// ƒê·ª£i Echo ƒë∆∞·ª£c kh·ªüi t·∫°o
function waitForEcho(callback, maxAttempts = 10, attempt = 1) {
    if (typeof window.Echo !== 'undefined' && window.Echo) {
        console.log('‚úÖ Laravel Echo ƒë√£ s·∫µn s√†ng cho th√¥ng b√°o realtime');
        callback();
    } else if (attempt < maxAttempts) {
        console.log(`‚è≥ ƒêang ƒë·ª£i Echo kh·ªüi t·∫°o... (${attempt}/${maxAttempts})`);
        setTimeout(() => waitForEcho(callback, maxAttempts, attempt + 1), 500);
    } else {
        console.error('‚ùå Laravel Echo kh√¥ng th·ªÉ kh·ªüi t·∫°o sau', maxAttempts, 'l·∫ßn th·ª≠');
    }
}

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o toast
 * @param {string} type - Lo·∫°i th√¥ng b√°o (success, info, warning, error)
 * @param {string} title - Ti√™u ƒë·ªÅ th√¥ng b√°o
 * @param {string} message - N·ªôi dung th√¥ng b√°o
 */
function showNotification(type, title, message) {
    // S·ª≠ d·ª•ng toastr n·∫øu c√≥
    if (typeof toastr !== 'undefined') {
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
        
        toastr[type](message, title);
    }
    // S·ª≠ d·ª•ng SweetAlert2 n·∫øu c√≥
    else if (typeof Swal !== 'undefined') {
        Swal.fire({
            icon: type === 'success' ? 'success' : type === 'error' ? 'error' : 'info',
            title: title,
            text: message,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 5000,
            timerProgressBar: true
        });
    }
    // Fallback s·ª≠ d·ª•ng alert
    else {
        alert(title + ': ' + message);
    }
}

/**
 * Ph√°t √¢m thanh th√¥ng b√°o
 */
function playNotificationSound() {
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();

        // oscillator ch√≠nh
        const osc1 = audioContext.createOscillator();
        osc1.type = "sine";
        osc1.frequency.setValueAtTime(880, audioContext.currentTime); // A5

        // oscillator ph·ª• ƒë·ªÉ t·∫°o h√≤a √¢m
        const osc2 = audioContext.createOscillator();
        osc2.type = "triangle";
        osc2.frequency.setValueAtTime(1760, audioContext.currentTime); // A6 (1 octave tr√™n)

        const gainNode = audioContext.createGain();
        gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1);

        // K·∫øt n·ªëi
        osc1.connect(gainNode);
        osc2.connect(gainNode);
        gainNode.connect(audioContext.destination);

        // Start/Stop
        osc1.start();
        osc2.start();
        osc1.stop(audioContext.currentTime + 1);
        osc2.stop(audioContext.currentTime + 1);
    } catch (error) {
        console.log("Kh√¥ng th·ªÉ ph√°t √¢m thanh th√¥ng b√°o:", error);
    }
}


/**
 * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√¥ng b√°o tr√™n badge
 * @param {number} count - S·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
 */
function updateNotificationBadge(count = null) {
    const badge = document.querySelector('.topbar-badge');
    if (!badge) {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y badge th√¥ng b√°o v·ªõi selector .topbar-badge');
        return;
    }
    
    if (count !== null) {
        badge.textContent = count;
        badge.style.display = count > 0 ? 'block' : 'none';
    } else {
        // TƒÉng s·ªë hi·ªán t·∫°i l√™n 1
        const currentCount = parseInt(badge.textContent) || 0;
        const newCount = currentCount + 1;
        badge.textContent = newCount;
        badge.style.display = 'block';
    }
}

/**
 * Th√™m th√¥ng b√°o m·ªõi v√†o dropdown
 * @param {Object} notification - Th√¥ng tin th√¥ng b√°o
 * @param {string} notification.title - Ti√™u ƒë·ªÅ th√¥ng b√°o
 * @param {string} notification.message - N·ªôi dung th√¥ng b√°o
 * @param {string} notification.time - Th·ªùi gian th√¥ng b√°o
 * @param {string} notification.icon - Icon class (bx-*)
 * @param {string} notification.type - Lo·∫°i th√¥ng b√°o (success, info, warning, danger)
 */
function addNotificationToDropdown(notification) {
    let notificationContainer = document.querySelector('#all-noti-tab [data-simplebar]');
    if (!notificationContainer) {
        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y container th√¥ng b√°o v·ªõi selector #all-noti-tab [data-simplebar]');
        console.log('ƒêang t√¨m ki·∫øm c√°c selector kh√°c...');
        // Th·ª≠ selector kh√°c
        const altContainer = document.querySelector('#all-noti-tab');
        if (altContainer) {
            console.log('‚úÖ T√¨m th·∫•y container thay th·∫ø');
            notificationContainer = altContainer.querySelector('[data-simplebar]') || altContainer;
        } else {
            console.error('‚ùå Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ container n√†o');
            return;
        }
    }
    
    // T·∫°o HTML cho th√¥ng b√°o m·ªõi
    const notificationHTML = `
        <div class="text-reset notification-item d-block dropdown-item position-relative new-notification">
            <div class="d-flex">
                <div class="avatar-xs me-3 flex-shrink-0">
                    <span class="avatar-title bg-${getNotificationColor(notification.type)}-subtle text-${getNotificationColor(notification.type)} rounded-circle fs-16">
                        <i class="bx ${notification.icon}"></i>
                    </span>
                </div>
                <div class="flex-grow-1">
                    <a href="#!" class="stretched-link">
                        <h6 class="mt-0 mb-2 lh-base">${notification.title}</h6>
                    </a>
                    <p class="mb-1 fs-13 text-muted">${notification.message}</p>
                    <p class="mb-0 fs-11 fw-medium text-uppercase text-muted">
                        <i class="mdi mdi-clock-outline"></i> ${notification.time}
                    </p>
                </div>
                <div class="px-2 fs-15">
                    <div class="form-check notification-check">
                        <input class="form-check-input" type="checkbox" id="notification-check-${Date.now()}">
                        <label class="form-check-label" for="notification-check-${Date.now()}"></label>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    // Th√™m th√¥ng b√°o m·ªõi v√†o ƒë·∫ßu danh s√°ch
    const viewAllButton = notificationContainer.querySelector('.view-all');
    if (viewAllButton) {
        viewAllButton.insertAdjacentHTML('beforebegin', notificationHTML);
    } else {
        notificationContainer.insertAdjacentHTML('beforeend', notificationHTML);
    }
    
    // Gi·ªõi h·∫°n t·ªëi ƒëa 3 th√¥ng b√°o, x√≥a th√¥ng b√°o c≈© n·∫øu v∆∞·ª£t qu√°
    const allNotifications = notificationContainer.querySelectorAll('.notification-item:not(.view-all)');
    if (allNotifications.length > 3) {
        // X√≥a th√¥ng b√°o c≈© nh·∫•t (kh√¥ng ph·∫£i view-all button)
        const oldestNotification = allNotifications[allNotifications.length - 1];
        if (oldestNotification && !oldestNotification.classList.contains('view-all')) {
            oldestNotification.remove();
        }
    }
    
    // Th√™m hi·ªáu ·ª©ng fade-in cho th√¥ng b√°o m·ªõi
    const newNotification = notificationContainer.querySelector('.new-notification');
    if (newNotification) {
        newNotification.style.opacity = '0';
        newNotification.style.transform = 'translateY(-10px)';
        
        setTimeout(() => {
            newNotification.style.transition = 'all 0.3s ease';
            newNotification.style.opacity = '1';
            newNotification.style.transform = 'translateY(0)';
            
            // X√≥a class new-notification sau khi ho√†n th√†nh animation
            setTimeout(() => {
                newNotification.classList.remove('new-notification');
            }, 300);
        }, 100);
    }
    
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√¥ng b√°o trong header
    updateNotificationHeader();
}

/**
 * L·∫•y m√†u s·∫Øc cho lo·∫°i th√¥ng b√°o
 * @param {string} type - Lo·∫°i th√¥ng b√°o
 * @returns {string} - M√†u s·∫Øc t∆∞∆°ng ·ª©ng
 */
function getNotificationColor(type) {
    const colors = {
        'success': 'success',
        'info': 'info', 
        'warning': 'warning',
        'danger': 'danger',
        'primary': 'primary'
    };
    return colors[type] || 'info';
}

/**
 * C·∫≠p nh·∫≠t header th√¥ng b√°o (s·ªë l∆∞·ª£ng)
 */
function updateNotificationHeader() {
    const headerBadge = document.querySelector('.dropdown-head .badge');
    const tabBadge = document.querySelector('a[href="#all-noti-tab"]');
    
    if (headerBadge && tabBadge) {
        const currentCount = parseInt(headerBadge.textContent.replace(/\D/g, '')) || 0;
        const newCount = currentCount + 1;
        
        headerBadge.textContent = `${newCount} New`;
        tabBadge.textContent = `All (${newCount})`;
    }
}

/**
 * L·∫Øng nghe th√¥ng b√°o cho Admin
 * Channel: admin-orders
 * Event: order.created
 */
function listenForAdminNotifications() {
    if (!window.Echo) return;
    
    console.log('üîä ƒêang l·∫Øng nghe th√¥ng b√°o admin tr√™n channel: admin-orders');
    
    // L·∫Øng nghe th√¥ng b√°o ƒë∆°n h√†ng
    // if(data.target === 'customer') return null;
    window.Echo.channel('admin-orders')
        .listen('.order.created', (data) => {
            console.log('üì¶ ƒê∆°n h√†ng m·ªõi:', data);
            // Hi·ªÉn th·ªã th√¥ng b√°o toast
            showNotification(
                'info',
                'üõí ƒê∆°n h√†ng m·ªõi!',
                `C√≥ ƒë∆°n h√†ng m·ªõi t·ª´ kh√°ch h√†ng ${data.user_name} v·ªõi gi√° tr·ªã ${data.total_amount}`,
                `ƒê∆°n h√†ng #${data.order_code} v·ª´a ƒë∆∞·ª£c t·∫°o l√∫c ${data.created_at}`
            );
            
            // Th√™m th√¥ng b√°o v√†o dropdown
            addNotificationToDropdown({
                title: 'ƒê∆°n h√†ng m·ªõi!',
                message: `ƒê∆°n h√†ng t·ª´ ${data.customer_name} - ${data.total_amount}ƒë`,
                time: 'V·ª´a xong',
                icon: 'bx-shopping-bag',
                type: 'success'
            });
            
            // Ph√°t √¢m thanh
            playNotificationSound();
            
            // C·∫≠p nh·∫≠t badge
            updateNotificationBadge();
        })
        .listen('.order.cancelled', (data) => {
            console.log('‚ùå ƒê∆°n h√†ng b·ªã h·ªßy:', data);
            // Hi·ªÉn th·ªã th√¥ng b√°o toast
            showNotification(
                'warning',
                '‚ùå ƒê∆°n h√†ng b·ªã h·ªßy!',
                `Kh√°ch h√†ng ${data.customer_name} ƒë√£ h·ªßy ƒë∆°n h√†ng #${data.order_code} - L√Ω do: ${data.cancellation_reason}`
            );
            
            // Th√™m th√¥ng b√°o v√†o dropdown
            addNotificationToDropdown({
                title: 'ƒê∆°n h√†ng b·ªã h·ªßy!',
                message: `${data.customer_name} h·ªßy ƒë∆°n #${data.order_code} - ${data.refund_amount > 0 ? 'ƒê√£ ho√†n ' + data.refund_amount + 'ƒë' : 'Kh√¥ng ho√†n ti·ªÅn'}`,
                time: 'V·ª´a xong',
                icon: 'bx-x-circle',
                type: 'warning'
            });
            
            // Ph√°t √¢m thanh
            playNotificationSound();
            
            // C·∫≠p nh·∫≠t badge
            updateNotificationBadge();
        })
        .listen('.refund.requested', (data) => {
            console.log('üí∞ Y√™u c·∫ßu ho√†n ti·ªÅn:', data);
            if(data.target === 'customer') return null;
            // Hi·ªÉn th·ªã th√¥ng b√°o toast
            showNotification(
                'info',
                'üí∞ Y√™u c·∫ßu ho√†n ti·ªÅn!',
                `Kh√°ch h√†ng ${data.customer_name} y√™u c·∫ßu ho√†n ti·ªÅn ƒë∆°n h√†ng #${data.order_code}`
            );
            
            // Th√™m th√¥ng b√°o v√†o dropdown
            addNotificationToDropdown({
                title: 'Y√™u c·∫ßu ho√†n ti·ªÅn!',
                message: `${data.customer_name} - ƒê∆°n #${data.order_code} - ${data.refund_amount}ƒë`,
                time: 'V·ª´a xong',
                icon: 'bx-money',
                type: 'info'
            });
            
            // Ph√°t √¢m thanh
            playNotificationSound();
            
            // C·∫≠p nh·∫≠t badge
            updateNotificationBadge();
        })
        .error((error) => {
            console.error('‚ùå L·ªói khi l·∫Øng nghe channel admin-orders:', error);
        });
    
    console.log('üîä ƒêang l·∫Øng nghe th√¥ng b√°o v√≠ admin tr√™n channel: admin-wallets');
    
    // L·∫Øng nghe th√¥ng b√°o v√≠
    window.Echo.channel('admin-wallets')
        .listen('.wallet.deposited', (data) => {
            console.log('üí∞ N·∫°p ti·ªÅn v√≠:', data);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o toast
            showNotification(
                'success',
                'üí∞ N·∫°p ti·ªÅn v√≠!',
                `${data.user_name} ƒë√£ n·∫°p ${data.amount}ƒë v√†o v√≠`
            );
            
            // Th√™m th√¥ng b√°o v√†o dropdown
            addNotificationToDropdown({
                title: 'N·∫°p ti·ªÅn v√≠!',
                message: `${data.customer_name} - ${data.amount}ƒë`,
                time: 'V·ª´a xong',
                icon: 'bx-wallet',
                type: 'success'
            });
            
            // Ph√°t √¢m thanh
            playNotificationSound();
            
            // C·∫≠p nh·∫≠t badge
            updateNotificationBadge();
        })
        .listen('.wallet.withdrawn', (data) => {
            console.log('üí∏ R√∫t ti·ªÅn v√≠:', data);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o toast
            showNotification(
                'warning',
                'üí∏ R√∫t ti·ªÅn v√≠!',
                `${data.user_name} ƒë√£ t·∫°o y√™u c·∫ßu r√∫t ${data.amount}ƒë t·ª´ v√≠`
            );
            
            // Th√™m th√¥ng b√°o v√†o dropdown
            addNotificationToDropdown({
                title: 'R√∫t ti·ªÅn v√≠!',
                message: `${data.customer_name} - ${data.amount}ƒë`,
                time: 'V·ª´a xong',
                icon: 'bx-money-withdraw',
                type: 'warning'
            });
            
            // Ph√°t √¢m thanh
            playNotificationSound();
            
            // C·∫≠p nh·∫≠t badge
            updateNotificationBadge();
        })
        .error((error) => {
            console.error('‚ùå L·ªói khi l·∫Øng nghe channel admin-wallets:', error);
        });
}

/**
 * L·∫Øng nghe th√¥ng b√°o cho Kh√°ch h√†ng
 * Channel: customer-{userId}
 * Event: order.status.updated
 * @param {string|number} userId - ID c·ªßa kh√°ch h√†ng
 */
function listenForCustomerNotifications(userId) {
    if (!window.Echo || !userId) return;
    
    const channelName = `customer-${userId}`;
    console.log(`üîä ƒêang l·∫Øng nghe th√¥ng b√°o kh√°ch h√†ng tr√™n channel: ${channelName}`);
    
    window.Echo.channel(channelName)
        .listen('.order.status.updated', (data) => {
            console.log('üìã C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:', data);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o
            showNotification(
                'success',
                'üì¶ C·∫≠p nh·∫≠t ƒë∆°n h√†ng',
                `ƒê∆°n h√†ng #${data.order_code} ƒë√£ chuy·ªÉn t·ª´ "${data.old_status}" sang "${data.new_status}" l√∫c ${data.updated_at}`
            );
            
            // Ph√°t √¢m thanh
            playNotificationSound();
            
            // C·∫≠p nh·∫≠t badge
            // updateNotificationBadge(newCount);
        })
        .listen('.wallet.deposited', (data) => {
            console.log('üí∞ N·∫°p ti·ªÅn v√†o v√≠:', data);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o
            showNotification(
                'success',
                'üí∞ N·∫°p ti·ªÅn th√†nh c√¥ng',
                `B·∫°n ƒë√£ n·∫°p th√†nh c√¥ng ${new Intl.NumberFormat('vi-VN').format(data.amount)}ƒë v√†o v√≠ l√∫c ${data.deposited_at}`
            );
            
            // Ph√°t √¢m thanh
            playNotificationSound();
            
            // C·∫≠p nh·∫≠t badge
            // updateNotificationBadge(newCount);
        })
        .listen('.wallet.withdrawn', (data) => {
            console.log('üí∏ R√∫t ti·ªÅn t·ª´ v√≠:', data);
            
            // Hi·ªÉn th·ªã th√¥ng b√°o
            showNotification(
                'info',
                'üí∏ R√∫t ti·ªÅn th√†nh c√¥ng',
                `B·∫°n ƒë√£ r√∫t th√†nh c√¥ng ${new Intl.NumberFormat('vi-VN').format(data.amount)}ƒë t·ª´ v√≠ l√∫c ${data.withdrawn_at}`
            );
            
            // Ph√°t √¢m thanh
            playNotificationSound();
            
            // C·∫≠p nh·∫≠t badge
            // updateNotificationBadge(newCount);
        })
        .error((error) => {
            console.error(`‚ùå L·ªói khi l·∫Øng nghe channel ${channelName}:`, error);
        });
}

/**
 * Kh·ªüi t·∫°o th√¥ng b√°o realtime
 * @param {Object} config - C·∫•u h√¨nh
 * @param {string} config.userRole - Vai tr√≤ ng∆∞·ªùi d√πng (admin, customer)
 * @param {string|number} config.userId - ID ng∆∞·ªùi d√πng
 * @param {boolean} config.enableSound - B·∫≠t √¢m thanh th√¥ng b√°o
 * @param {boolean} config.enableBadge - B·∫≠t badge th√¥ng b√°o
 */
function initializeNotifications(config = {}) {
    if (!window.Echo) {
        console.error('‚ùå Laravel Echo ch∆∞a s·∫µn s√†ng');
        return;
    }
    
    console.log('üöÄ Kh·ªüi t·∫°o h·ªá th·ªëng th√¥ng b√°o realtime...');
    
    // L·∫Øng nghe th√¥ng b√°o admin (so s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    if (config.userRole && config.userRole.toLowerCase() === 'admin') {
        listenForAdminNotifications();
    }
    
    // L·∫Øng nghe th√¥ng b√°o kh√°ch h√†ng (so s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    if (config.userId && config.userRole && config.userRole.toLowerCase() === 'user') {
        listenForCustomerNotifications(config.userId);
    }
    
    console.log('‚úÖ H·ªá th·ªëng th√¥ng b√°o realtime ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
}

/**
 * Ng·∫Øt k·∫øt n·ªëi th√¥ng b√°o
 */
function disconnectNotifications() {
    if (window.Echo) {
        window.Echo.disconnect();
        console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi th√¥ng b√°o realtime');
    }
}

// Export functions ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
window.NotificationSystem = {
    initialize: initializeNotifications,
    disconnect: disconnectNotifications,
    showNotification: showNotification,
    updateBadge: updateNotificationBadge
};

// Kh·ªüi t·∫°o h·ªá th·ªëng th√¥ng b√°o khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ DOM ƒë√£ s·∫µn s√†ng, ƒëang ki·ªÉm tra th√¥ng tin user...');
    
    // L·∫•y th√¥ng tin user t·ª´ meta tags
    const userId = document.querySelector('meta[name="user-id"]')?.content;
    const userRole = document.querySelector('meta[name="user-role"]')?.content;
    
    console.log('üìã Th√¥ng tin user:', { userId, userRole });
    
    if (userId && userRole && userId !== '') {
        console.log(`üöÄ Chu·∫©n b·ªã kh·ªüi t·∫°o th√¥ng b√°o cho ${userRole} (ID: ${userId})`);
        
        const config = {
            userId: userId,
            userRole: userRole,
            enableSound: true,
            enableBadge: true
        };
        
        // ƒê·ª£i Echo ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi kh·ªüi t·∫°o th√¥ng b√°o
        waitForEcho(() => {
            console.log(`üöÄ Kh·ªüi t·∫°o th√¥ng b√°o cho ${userRole} (ID: ${userId})`);
            initializeNotifications(config);
        });
        
    } else {
        console.log('‚ÑπÔ∏è Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p - kh√¥ng kh·ªüi t·∫°o th√¥ng b√°o');
        console.log('üîç Debug: userId ="' + userId + '", userRole ="' + userRole + '"');
    }
});